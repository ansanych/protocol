// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: products.proto

package protocol

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ProductsClient is the client API for Products service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProductsClient interface {
	GetProducts(ctx context.Context, in *SelectRequest, opts ...grpc.CallOption) (*ProductsReply, error)
	GetProduct(ctx context.Context, in *ProductRequest, opts ...grpc.CallOption) (*Product, error)
	CreateFromShop(ctx context.Context, in *ProductLink, opts ...grpc.CallOption) (*BoolReply, error)
	LinkToShop(ctx context.Context, in *ProductLink, opts ...grpc.CallOption) (*BoolReply, error)
	UnlinkToShop(ctx context.Context, in *ProductLink, opts ...grpc.CallOption) (*BoolReply, error)
	UpdateProduct(ctx context.Context, in *UpdateProductRequest, opts ...grpc.CallOption) (*BoolReply, error)
	SetProductBrand(ctx context.Context, in *SetProductBrandRequest, opts ...grpc.CallOption) (*BoolReply, error)
	RemoveProductBrand(ctx context.Context, in *SetProductBrandRequest, opts ...grpc.CallOption) (*BoolReply, error)
	SetProductPurchase(ctx context.Context, in *SetProductPurchaseRequest, opts ...grpc.CallOption) (*BoolReply, error)
	GetProductPurchase(ctx context.Context, in *ProductRequest, opts ...grpc.CallOption) (*ProductPurchase, error)
	GetProductPurchases(ctx context.Context, in *ProductRequest, opts ...grpc.CallOption) (*PurchasesReply, error)
	RemoveProductPurchase(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*BoolReply, error)
	SearchProduct(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*ProductsReply, error)
	CheckLinkedShopProducts(ctx context.Context, in *CheckLinksReqest, opts ...grpc.CallOption) (*ProductsLinks, error)
	CheckLinkedShopProduct(ctx context.Context, in *CheckLinksReqest, opts ...grpc.CallOption) (*ProductLink, error)
}

type productsClient struct {
	cc grpc.ClientConnInterface
}

func NewProductsClient(cc grpc.ClientConnInterface) ProductsClient {
	return &productsClient{cc}
}

func (c *productsClient) GetProducts(ctx context.Context, in *SelectRequest, opts ...grpc.CallOption) (*ProductsReply, error) {
	out := new(ProductsReply)
	err := c.cc.Invoke(ctx, "/protocol.Products/GetProducts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productsClient) GetProduct(ctx context.Context, in *ProductRequest, opts ...grpc.CallOption) (*Product, error) {
	out := new(Product)
	err := c.cc.Invoke(ctx, "/protocol.Products/GetProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productsClient) CreateFromShop(ctx context.Context, in *ProductLink, opts ...grpc.CallOption) (*BoolReply, error) {
	out := new(BoolReply)
	err := c.cc.Invoke(ctx, "/protocol.Products/CreateFromShop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productsClient) LinkToShop(ctx context.Context, in *ProductLink, opts ...grpc.CallOption) (*BoolReply, error) {
	out := new(BoolReply)
	err := c.cc.Invoke(ctx, "/protocol.Products/LinkToShop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productsClient) UnlinkToShop(ctx context.Context, in *ProductLink, opts ...grpc.CallOption) (*BoolReply, error) {
	out := new(BoolReply)
	err := c.cc.Invoke(ctx, "/protocol.Products/UnlinkToShop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productsClient) UpdateProduct(ctx context.Context, in *UpdateProductRequest, opts ...grpc.CallOption) (*BoolReply, error) {
	out := new(BoolReply)
	err := c.cc.Invoke(ctx, "/protocol.Products/UpdateProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productsClient) SetProductBrand(ctx context.Context, in *SetProductBrandRequest, opts ...grpc.CallOption) (*BoolReply, error) {
	out := new(BoolReply)
	err := c.cc.Invoke(ctx, "/protocol.Products/SetProductBrand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productsClient) RemoveProductBrand(ctx context.Context, in *SetProductBrandRequest, opts ...grpc.CallOption) (*BoolReply, error) {
	out := new(BoolReply)
	err := c.cc.Invoke(ctx, "/protocol.Products/RemoveProductBrand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productsClient) SetProductPurchase(ctx context.Context, in *SetProductPurchaseRequest, opts ...grpc.CallOption) (*BoolReply, error) {
	out := new(BoolReply)
	err := c.cc.Invoke(ctx, "/protocol.Products/SetProductPurchase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productsClient) GetProductPurchase(ctx context.Context, in *ProductRequest, opts ...grpc.CallOption) (*ProductPurchase, error) {
	out := new(ProductPurchase)
	err := c.cc.Invoke(ctx, "/protocol.Products/GetProductPurchase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productsClient) GetProductPurchases(ctx context.Context, in *ProductRequest, opts ...grpc.CallOption) (*PurchasesReply, error) {
	out := new(PurchasesReply)
	err := c.cc.Invoke(ctx, "/protocol.Products/GetProductPurchases", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productsClient) RemoveProductPurchase(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*BoolReply, error) {
	out := new(BoolReply)
	err := c.cc.Invoke(ctx, "/protocol.Products/RemoveProductPurchase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productsClient) SearchProduct(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*ProductsReply, error) {
	out := new(ProductsReply)
	err := c.cc.Invoke(ctx, "/protocol.Products/SearchProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productsClient) CheckLinkedShopProducts(ctx context.Context, in *CheckLinksReqest, opts ...grpc.CallOption) (*ProductsLinks, error) {
	out := new(ProductsLinks)
	err := c.cc.Invoke(ctx, "/protocol.Products/CheckLinkedShopProducts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productsClient) CheckLinkedShopProduct(ctx context.Context, in *CheckLinksReqest, opts ...grpc.CallOption) (*ProductLink, error) {
	out := new(ProductLink)
	err := c.cc.Invoke(ctx, "/protocol.Products/CheckLinkedShopProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProductsServer is the server API for Products service.
// All implementations must embed UnimplementedProductsServer
// for forward compatibility
type ProductsServer interface {
	GetProducts(context.Context, *SelectRequest) (*ProductsReply, error)
	GetProduct(context.Context, *ProductRequest) (*Product, error)
	CreateFromShop(context.Context, *ProductLink) (*BoolReply, error)
	LinkToShop(context.Context, *ProductLink) (*BoolReply, error)
	UnlinkToShop(context.Context, *ProductLink) (*BoolReply, error)
	UpdateProduct(context.Context, *UpdateProductRequest) (*BoolReply, error)
	SetProductBrand(context.Context, *SetProductBrandRequest) (*BoolReply, error)
	RemoveProductBrand(context.Context, *SetProductBrandRequest) (*BoolReply, error)
	SetProductPurchase(context.Context, *SetProductPurchaseRequest) (*BoolReply, error)
	GetProductPurchase(context.Context, *ProductRequest) (*ProductPurchase, error)
	GetProductPurchases(context.Context, *ProductRequest) (*PurchasesReply, error)
	RemoveProductPurchase(context.Context, *DeleteRequest) (*BoolReply, error)
	SearchProduct(context.Context, *SearchRequest) (*ProductsReply, error)
	CheckLinkedShopProducts(context.Context, *CheckLinksReqest) (*ProductsLinks, error)
	CheckLinkedShopProduct(context.Context, *CheckLinksReqest) (*ProductLink, error)
	mustEmbedUnimplementedProductsServer()
}

// UnimplementedProductsServer must be embedded to have forward compatible implementations.
type UnimplementedProductsServer struct {
}

func (UnimplementedProductsServer) GetProducts(context.Context, *SelectRequest) (*ProductsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProducts not implemented")
}
func (UnimplementedProductsServer) GetProduct(context.Context, *ProductRequest) (*Product, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProduct not implemented")
}
func (UnimplementedProductsServer) CreateFromShop(context.Context, *ProductLink) (*BoolReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFromShop not implemented")
}
func (UnimplementedProductsServer) LinkToShop(context.Context, *ProductLink) (*BoolReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LinkToShop not implemented")
}
func (UnimplementedProductsServer) UnlinkToShop(context.Context, *ProductLink) (*BoolReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnlinkToShop not implemented")
}
func (UnimplementedProductsServer) UpdateProduct(context.Context, *UpdateProductRequest) (*BoolReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProduct not implemented")
}
func (UnimplementedProductsServer) SetProductBrand(context.Context, *SetProductBrandRequest) (*BoolReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetProductBrand not implemented")
}
func (UnimplementedProductsServer) RemoveProductBrand(context.Context, *SetProductBrandRequest) (*BoolReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveProductBrand not implemented")
}
func (UnimplementedProductsServer) SetProductPurchase(context.Context, *SetProductPurchaseRequest) (*BoolReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetProductPurchase not implemented")
}
func (UnimplementedProductsServer) GetProductPurchase(context.Context, *ProductRequest) (*ProductPurchase, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProductPurchase not implemented")
}
func (UnimplementedProductsServer) GetProductPurchases(context.Context, *ProductRequest) (*PurchasesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProductPurchases not implemented")
}
func (UnimplementedProductsServer) RemoveProductPurchase(context.Context, *DeleteRequest) (*BoolReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveProductPurchase not implemented")
}
func (UnimplementedProductsServer) SearchProduct(context.Context, *SearchRequest) (*ProductsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchProduct not implemented")
}
func (UnimplementedProductsServer) CheckLinkedShopProducts(context.Context, *CheckLinksReqest) (*ProductsLinks, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckLinkedShopProducts not implemented")
}
func (UnimplementedProductsServer) CheckLinkedShopProduct(context.Context, *CheckLinksReqest) (*ProductLink, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckLinkedShopProduct not implemented")
}
func (UnimplementedProductsServer) mustEmbedUnimplementedProductsServer() {}

// UnsafeProductsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProductsServer will
// result in compilation errors.
type UnsafeProductsServer interface {
	mustEmbedUnimplementedProductsServer()
}

func RegisterProductsServer(s grpc.ServiceRegistrar, srv ProductsServer) {
	s.RegisterService(&Products_ServiceDesc, srv)
}

func _Products_GetProducts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SelectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductsServer).GetProducts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Products/GetProducts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductsServer).GetProducts(ctx, req.(*SelectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Products_GetProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductsServer).GetProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Products/GetProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductsServer).GetProduct(ctx, req.(*ProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Products_CreateFromShop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductLink)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductsServer).CreateFromShop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Products/CreateFromShop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductsServer).CreateFromShop(ctx, req.(*ProductLink))
	}
	return interceptor(ctx, in, info, handler)
}

func _Products_LinkToShop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductLink)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductsServer).LinkToShop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Products/LinkToShop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductsServer).LinkToShop(ctx, req.(*ProductLink))
	}
	return interceptor(ctx, in, info, handler)
}

func _Products_UnlinkToShop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductLink)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductsServer).UnlinkToShop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Products/UnlinkToShop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductsServer).UnlinkToShop(ctx, req.(*ProductLink))
	}
	return interceptor(ctx, in, info, handler)
}

func _Products_UpdateProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductsServer).UpdateProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Products/UpdateProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductsServer).UpdateProduct(ctx, req.(*UpdateProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Products_SetProductBrand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetProductBrandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductsServer).SetProductBrand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Products/SetProductBrand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductsServer).SetProductBrand(ctx, req.(*SetProductBrandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Products_RemoveProductBrand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetProductBrandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductsServer).RemoveProductBrand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Products/RemoveProductBrand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductsServer).RemoveProductBrand(ctx, req.(*SetProductBrandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Products_SetProductPurchase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetProductPurchaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductsServer).SetProductPurchase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Products/SetProductPurchase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductsServer).SetProductPurchase(ctx, req.(*SetProductPurchaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Products_GetProductPurchase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductsServer).GetProductPurchase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Products/GetProductPurchase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductsServer).GetProductPurchase(ctx, req.(*ProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Products_GetProductPurchases_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductsServer).GetProductPurchases(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Products/GetProductPurchases",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductsServer).GetProductPurchases(ctx, req.(*ProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Products_RemoveProductPurchase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductsServer).RemoveProductPurchase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Products/RemoveProductPurchase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductsServer).RemoveProductPurchase(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Products_SearchProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductsServer).SearchProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Products/SearchProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductsServer).SearchProduct(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Products_CheckLinkedShopProducts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckLinksReqest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductsServer).CheckLinkedShopProducts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Products/CheckLinkedShopProducts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductsServer).CheckLinkedShopProducts(ctx, req.(*CheckLinksReqest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Products_CheckLinkedShopProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckLinksReqest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductsServer).CheckLinkedShopProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Products/CheckLinkedShopProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductsServer).CheckLinkedShopProduct(ctx, req.(*CheckLinksReqest))
	}
	return interceptor(ctx, in, info, handler)
}

// Products_ServiceDesc is the grpc.ServiceDesc for Products service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Products_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protocol.Products",
	HandlerType: (*ProductsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetProducts",
			Handler:    _Products_GetProducts_Handler,
		},
		{
			MethodName: "GetProduct",
			Handler:    _Products_GetProduct_Handler,
		},
		{
			MethodName: "CreateFromShop",
			Handler:    _Products_CreateFromShop_Handler,
		},
		{
			MethodName: "LinkToShop",
			Handler:    _Products_LinkToShop_Handler,
		},
		{
			MethodName: "UnlinkToShop",
			Handler:    _Products_UnlinkToShop_Handler,
		},
		{
			MethodName: "UpdateProduct",
			Handler:    _Products_UpdateProduct_Handler,
		},
		{
			MethodName: "SetProductBrand",
			Handler:    _Products_SetProductBrand_Handler,
		},
		{
			MethodName: "RemoveProductBrand",
			Handler:    _Products_RemoveProductBrand_Handler,
		},
		{
			MethodName: "SetProductPurchase",
			Handler:    _Products_SetProductPurchase_Handler,
		},
		{
			MethodName: "GetProductPurchase",
			Handler:    _Products_GetProductPurchase_Handler,
		},
		{
			MethodName: "GetProductPurchases",
			Handler:    _Products_GetProductPurchases_Handler,
		},
		{
			MethodName: "RemoveProductPurchase",
			Handler:    _Products_RemoveProductPurchase_Handler,
		},
		{
			MethodName: "SearchProduct",
			Handler:    _Products_SearchProduct_Handler,
		},
		{
			MethodName: "CheckLinkedShopProducts",
			Handler:    _Products_CheckLinkedShopProducts_Handler,
		},
		{
			MethodName: "CheckLinkedShopProduct",
			Handler:    _Products_CheckLinkedShopProduct_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "products.proto",
}
