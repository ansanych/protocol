// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: settings/v1/settings.proto

package protocol

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Settings_GetTaxes_FullMethodName              = "/settings.Settings/GetTaxes"
	Settings_SetCompanyTax_FullMethodName         = "/settings.Settings/SetCompanyTax"
	Settings_GetCompanyTaxes_FullMethodName       = "/settings.Settings/GetCompanyTaxes"
	Settings_GetCompanyTax_FullMethodName         = "/settings.Settings/GetCompanyTax"
	Settings_GetBrands_FullMethodName             = "/settings.Settings/GetBrands"
	Settings_GetBrand_FullMethodName              = "/settings.Settings/GetBrand"
	Settings_SearchBrand_FullMethodName           = "/settings.Settings/SearchBrand"
	Settings_SetBrand_FullMethodName              = "/settings.Settings/SetBrand"
	Settings_GetCompanyBrands_FullMethodName      = "/settings.Settings/GetCompanyBrands"
	Settings_GetCompanyBrand_FullMethodName       = "/settings.Settings/GetCompanyBrand"
	Settings_GetMargin_FullMethodName             = "/settings.Settings/GetMargin"
	Settings_GetMarginBrand_FullMethodName        = "/settings.Settings/GetMarginBrand"
	Settings_SetMargin_FullMethodName             = "/settings.Settings/SetMargin"
	Settings_SetMarginBrand_FullMethodName        = "/settings.Settings/SetMarginBrand"
	Settings_UpdateMargin_FullMethodName          = "/settings.Settings/UpdateMargin"
	Settings_GetMarginArchive_FullMethodName      = "/settings.Settings/GetMarginArchive"
	Settings_GetMarginArchiveBrand_FullMethodName = "/settings.Settings/GetMarginArchiveBrand"
	Settings_DeleteMargin_FullMethodName          = "/settings.Settings/DeleteMargin"
	Settings_GetShops_FullMethodName              = "/settings.Settings/GetShops"
	Settings_GetCompanyShops_FullMethodName       = "/settings.Settings/GetCompanyShops"
	Settings_SetCompanyShop_FullMethodName        = "/settings.Settings/SetCompanyShop"
	Settings_ActivateCompanyShop_FullMethodName   = "/settings.Settings/ActivateCompanyShop"
)

// SettingsClient is the client API for Settings service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SettingsClient interface {
	GetTaxes(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*TaxesReply, error)
	SetCompanyTax(ctx context.Context, in *SetCompanyTaxRequest, opts ...grpc.CallOption) (*BoolReply, error)
	GetCompanyTaxes(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*CompanyTaxesReply, error)
	GetCompanyTax(ctx context.Context, in *GetCompanyTaxRequest, opts ...grpc.CallOption) (*CompanyTax, error)
	GetBrands(ctx context.Context, in *GetBrandsRequest, opts ...grpc.CallOption) (*BrandsReply, error)
	GetBrand(ctx context.Context, in *GetBrandRequest, opts ...grpc.CallOption) (*Brand, error)
	SearchBrand(ctx context.Context, in *SearchBrandRequest, opts ...grpc.CallOption) (*BrandsReply, error)
	SetBrand(ctx context.Context, in *SetBrandRequest, opts ...grpc.CallOption) (*InsertReply, error)
	GetCompanyBrands(ctx context.Context, in *GetCompanyBrandsRequest, opts ...grpc.CallOption) (*BrandsReply, error)
	GetCompanyBrand(ctx context.Context, in *GetBrandRequest, opts ...grpc.CallOption) (*Brand, error)
	GetMargin(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*Margin, error)
	GetMarginBrand(ctx context.Context, in *MarginBrandRequest, opts ...grpc.CallOption) (*Margin, error)
	SetMargin(ctx context.Context, in *SetMarginRequest, opts ...grpc.CallOption) (*InsertReply, error)
	SetMarginBrand(ctx context.Context, in *SetMarginRequest, opts ...grpc.CallOption) (*InsertReply, error)
	UpdateMargin(ctx context.Context, in *UpdateMarginRequest, opts ...grpc.CallOption) (*BoolReply, error)
	GetMarginArchive(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*Margins, error)
	GetMarginArchiveBrand(ctx context.Context, in *MarginBrandRequest, opts ...grpc.CallOption) (*Margins, error)
	DeleteMargin(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*BoolReply, error)
	GetShops(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*ShopsReply, error)
	GetCompanyShops(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*CompanyShopsReply, error)
	SetCompanyShop(ctx context.Context, in *SetCompanyShopRequest, opts ...grpc.CallOption) (*BoolReply, error)
	ActivateCompanyShop(ctx context.Context, in *ActivateCompanyShopRequest, opts ...grpc.CallOption) (*BoolReply, error)
}

type settingsClient struct {
	cc grpc.ClientConnInterface
}

func NewSettingsClient(cc grpc.ClientConnInterface) SettingsClient {
	return &settingsClient{cc}
}

func (c *settingsClient) GetTaxes(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*TaxesReply, error) {
	out := new(TaxesReply)
	err := c.cc.Invoke(ctx, Settings_GetTaxes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *settingsClient) SetCompanyTax(ctx context.Context, in *SetCompanyTaxRequest, opts ...grpc.CallOption) (*BoolReply, error) {
	out := new(BoolReply)
	err := c.cc.Invoke(ctx, Settings_SetCompanyTax_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *settingsClient) GetCompanyTaxes(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*CompanyTaxesReply, error) {
	out := new(CompanyTaxesReply)
	err := c.cc.Invoke(ctx, Settings_GetCompanyTaxes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *settingsClient) GetCompanyTax(ctx context.Context, in *GetCompanyTaxRequest, opts ...grpc.CallOption) (*CompanyTax, error) {
	out := new(CompanyTax)
	err := c.cc.Invoke(ctx, Settings_GetCompanyTax_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *settingsClient) GetBrands(ctx context.Context, in *GetBrandsRequest, opts ...grpc.CallOption) (*BrandsReply, error) {
	out := new(BrandsReply)
	err := c.cc.Invoke(ctx, Settings_GetBrands_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *settingsClient) GetBrand(ctx context.Context, in *GetBrandRequest, opts ...grpc.CallOption) (*Brand, error) {
	out := new(Brand)
	err := c.cc.Invoke(ctx, Settings_GetBrand_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *settingsClient) SearchBrand(ctx context.Context, in *SearchBrandRequest, opts ...grpc.CallOption) (*BrandsReply, error) {
	out := new(BrandsReply)
	err := c.cc.Invoke(ctx, Settings_SearchBrand_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *settingsClient) SetBrand(ctx context.Context, in *SetBrandRequest, opts ...grpc.CallOption) (*InsertReply, error) {
	out := new(InsertReply)
	err := c.cc.Invoke(ctx, Settings_SetBrand_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *settingsClient) GetCompanyBrands(ctx context.Context, in *GetCompanyBrandsRequest, opts ...grpc.CallOption) (*BrandsReply, error) {
	out := new(BrandsReply)
	err := c.cc.Invoke(ctx, Settings_GetCompanyBrands_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *settingsClient) GetCompanyBrand(ctx context.Context, in *GetBrandRequest, opts ...grpc.CallOption) (*Brand, error) {
	out := new(Brand)
	err := c.cc.Invoke(ctx, Settings_GetCompanyBrand_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *settingsClient) GetMargin(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*Margin, error) {
	out := new(Margin)
	err := c.cc.Invoke(ctx, Settings_GetMargin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *settingsClient) GetMarginBrand(ctx context.Context, in *MarginBrandRequest, opts ...grpc.CallOption) (*Margin, error) {
	out := new(Margin)
	err := c.cc.Invoke(ctx, Settings_GetMarginBrand_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *settingsClient) SetMargin(ctx context.Context, in *SetMarginRequest, opts ...grpc.CallOption) (*InsertReply, error) {
	out := new(InsertReply)
	err := c.cc.Invoke(ctx, Settings_SetMargin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *settingsClient) SetMarginBrand(ctx context.Context, in *SetMarginRequest, opts ...grpc.CallOption) (*InsertReply, error) {
	out := new(InsertReply)
	err := c.cc.Invoke(ctx, Settings_SetMarginBrand_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *settingsClient) UpdateMargin(ctx context.Context, in *UpdateMarginRequest, opts ...grpc.CallOption) (*BoolReply, error) {
	out := new(BoolReply)
	err := c.cc.Invoke(ctx, Settings_UpdateMargin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *settingsClient) GetMarginArchive(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*Margins, error) {
	out := new(Margins)
	err := c.cc.Invoke(ctx, Settings_GetMarginArchive_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *settingsClient) GetMarginArchiveBrand(ctx context.Context, in *MarginBrandRequest, opts ...grpc.CallOption) (*Margins, error) {
	out := new(Margins)
	err := c.cc.Invoke(ctx, Settings_GetMarginArchiveBrand_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *settingsClient) DeleteMargin(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*BoolReply, error) {
	out := new(BoolReply)
	err := c.cc.Invoke(ctx, Settings_DeleteMargin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *settingsClient) GetShops(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*ShopsReply, error) {
	out := new(ShopsReply)
	err := c.cc.Invoke(ctx, Settings_GetShops_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *settingsClient) GetCompanyShops(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*CompanyShopsReply, error) {
	out := new(CompanyShopsReply)
	err := c.cc.Invoke(ctx, Settings_GetCompanyShops_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *settingsClient) SetCompanyShop(ctx context.Context, in *SetCompanyShopRequest, opts ...grpc.CallOption) (*BoolReply, error) {
	out := new(BoolReply)
	err := c.cc.Invoke(ctx, Settings_SetCompanyShop_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *settingsClient) ActivateCompanyShop(ctx context.Context, in *ActivateCompanyShopRequest, opts ...grpc.CallOption) (*BoolReply, error) {
	out := new(BoolReply)
	err := c.cc.Invoke(ctx, Settings_ActivateCompanyShop_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SettingsServer is the server API for Settings service.
// All implementations must embed UnimplementedSettingsServer
// for forward compatibility
type SettingsServer interface {
	GetTaxes(context.Context, *AuthRequest) (*TaxesReply, error)
	SetCompanyTax(context.Context, *SetCompanyTaxRequest) (*BoolReply, error)
	GetCompanyTaxes(context.Context, *AuthRequest) (*CompanyTaxesReply, error)
	GetCompanyTax(context.Context, *GetCompanyTaxRequest) (*CompanyTax, error)
	GetBrands(context.Context, *GetBrandsRequest) (*BrandsReply, error)
	GetBrand(context.Context, *GetBrandRequest) (*Brand, error)
	SearchBrand(context.Context, *SearchBrandRequest) (*BrandsReply, error)
	SetBrand(context.Context, *SetBrandRequest) (*InsertReply, error)
	GetCompanyBrands(context.Context, *GetCompanyBrandsRequest) (*BrandsReply, error)
	GetCompanyBrand(context.Context, *GetBrandRequest) (*Brand, error)
	GetMargin(context.Context, *AuthRequest) (*Margin, error)
	GetMarginBrand(context.Context, *MarginBrandRequest) (*Margin, error)
	SetMargin(context.Context, *SetMarginRequest) (*InsertReply, error)
	SetMarginBrand(context.Context, *SetMarginRequest) (*InsertReply, error)
	UpdateMargin(context.Context, *UpdateMarginRequest) (*BoolReply, error)
	GetMarginArchive(context.Context, *AuthRequest) (*Margins, error)
	GetMarginArchiveBrand(context.Context, *MarginBrandRequest) (*Margins, error)
	DeleteMargin(context.Context, *DeleteRequest) (*BoolReply, error)
	GetShops(context.Context, *AuthRequest) (*ShopsReply, error)
	GetCompanyShops(context.Context, *AuthRequest) (*CompanyShopsReply, error)
	SetCompanyShop(context.Context, *SetCompanyShopRequest) (*BoolReply, error)
	ActivateCompanyShop(context.Context, *ActivateCompanyShopRequest) (*BoolReply, error)
	mustEmbedUnimplementedSettingsServer()
}

// UnimplementedSettingsServer must be embedded to have forward compatible implementations.
type UnimplementedSettingsServer struct {
}

func (UnimplementedSettingsServer) GetTaxes(context.Context, *AuthRequest) (*TaxesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTaxes not implemented")
}
func (UnimplementedSettingsServer) SetCompanyTax(context.Context, *SetCompanyTaxRequest) (*BoolReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetCompanyTax not implemented")
}
func (UnimplementedSettingsServer) GetCompanyTaxes(context.Context, *AuthRequest) (*CompanyTaxesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCompanyTaxes not implemented")
}
func (UnimplementedSettingsServer) GetCompanyTax(context.Context, *GetCompanyTaxRequest) (*CompanyTax, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCompanyTax not implemented")
}
func (UnimplementedSettingsServer) GetBrands(context.Context, *GetBrandsRequest) (*BrandsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBrands not implemented")
}
func (UnimplementedSettingsServer) GetBrand(context.Context, *GetBrandRequest) (*Brand, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBrand not implemented")
}
func (UnimplementedSettingsServer) SearchBrand(context.Context, *SearchBrandRequest) (*BrandsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchBrand not implemented")
}
func (UnimplementedSettingsServer) SetBrand(context.Context, *SetBrandRequest) (*InsertReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetBrand not implemented")
}
func (UnimplementedSettingsServer) GetCompanyBrands(context.Context, *GetCompanyBrandsRequest) (*BrandsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCompanyBrands not implemented")
}
func (UnimplementedSettingsServer) GetCompanyBrand(context.Context, *GetBrandRequest) (*Brand, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCompanyBrand not implemented")
}
func (UnimplementedSettingsServer) GetMargin(context.Context, *AuthRequest) (*Margin, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMargin not implemented")
}
func (UnimplementedSettingsServer) GetMarginBrand(context.Context, *MarginBrandRequest) (*Margin, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMarginBrand not implemented")
}
func (UnimplementedSettingsServer) SetMargin(context.Context, *SetMarginRequest) (*InsertReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetMargin not implemented")
}
func (UnimplementedSettingsServer) SetMarginBrand(context.Context, *SetMarginRequest) (*InsertReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetMarginBrand not implemented")
}
func (UnimplementedSettingsServer) UpdateMargin(context.Context, *UpdateMarginRequest) (*BoolReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMargin not implemented")
}
func (UnimplementedSettingsServer) GetMarginArchive(context.Context, *AuthRequest) (*Margins, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMarginArchive not implemented")
}
func (UnimplementedSettingsServer) GetMarginArchiveBrand(context.Context, *MarginBrandRequest) (*Margins, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMarginArchiveBrand not implemented")
}
func (UnimplementedSettingsServer) DeleteMargin(context.Context, *DeleteRequest) (*BoolReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMargin not implemented")
}
func (UnimplementedSettingsServer) GetShops(context.Context, *AuthRequest) (*ShopsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShops not implemented")
}
func (UnimplementedSettingsServer) GetCompanyShops(context.Context, *AuthRequest) (*CompanyShopsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCompanyShops not implemented")
}
func (UnimplementedSettingsServer) SetCompanyShop(context.Context, *SetCompanyShopRequest) (*BoolReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetCompanyShop not implemented")
}
func (UnimplementedSettingsServer) ActivateCompanyShop(context.Context, *ActivateCompanyShopRequest) (*BoolReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActivateCompanyShop not implemented")
}
func (UnimplementedSettingsServer) mustEmbedUnimplementedSettingsServer() {}

// UnsafeSettingsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SettingsServer will
// result in compilation errors.
type UnsafeSettingsServer interface {
	mustEmbedUnimplementedSettingsServer()
}

func RegisterSettingsServer(s grpc.ServiceRegistrar, srv SettingsServer) {
	s.RegisterService(&Settings_ServiceDesc, srv)
}

func _Settings_GetTaxes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettingsServer).GetTaxes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Settings_GetTaxes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettingsServer).GetTaxes(ctx, req.(*AuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Settings_SetCompanyTax_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetCompanyTaxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettingsServer).SetCompanyTax(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Settings_SetCompanyTax_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettingsServer).SetCompanyTax(ctx, req.(*SetCompanyTaxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Settings_GetCompanyTaxes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettingsServer).GetCompanyTaxes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Settings_GetCompanyTaxes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettingsServer).GetCompanyTaxes(ctx, req.(*AuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Settings_GetCompanyTax_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCompanyTaxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettingsServer).GetCompanyTax(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Settings_GetCompanyTax_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettingsServer).GetCompanyTax(ctx, req.(*GetCompanyTaxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Settings_GetBrands_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBrandsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettingsServer).GetBrands(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Settings_GetBrands_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettingsServer).GetBrands(ctx, req.(*GetBrandsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Settings_GetBrand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBrandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettingsServer).GetBrand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Settings_GetBrand_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettingsServer).GetBrand(ctx, req.(*GetBrandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Settings_SearchBrand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchBrandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettingsServer).SearchBrand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Settings_SearchBrand_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettingsServer).SearchBrand(ctx, req.(*SearchBrandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Settings_SetBrand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetBrandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettingsServer).SetBrand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Settings_SetBrand_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettingsServer).SetBrand(ctx, req.(*SetBrandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Settings_GetCompanyBrands_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCompanyBrandsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettingsServer).GetCompanyBrands(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Settings_GetCompanyBrands_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettingsServer).GetCompanyBrands(ctx, req.(*GetCompanyBrandsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Settings_GetCompanyBrand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBrandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettingsServer).GetCompanyBrand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Settings_GetCompanyBrand_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettingsServer).GetCompanyBrand(ctx, req.(*GetBrandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Settings_GetMargin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettingsServer).GetMargin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Settings_GetMargin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettingsServer).GetMargin(ctx, req.(*AuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Settings_GetMarginBrand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarginBrandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettingsServer).GetMarginBrand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Settings_GetMarginBrand_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettingsServer).GetMarginBrand(ctx, req.(*MarginBrandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Settings_SetMargin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetMarginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettingsServer).SetMargin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Settings_SetMargin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettingsServer).SetMargin(ctx, req.(*SetMarginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Settings_SetMarginBrand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetMarginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettingsServer).SetMarginBrand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Settings_SetMarginBrand_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettingsServer).SetMarginBrand(ctx, req.(*SetMarginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Settings_UpdateMargin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMarginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettingsServer).UpdateMargin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Settings_UpdateMargin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettingsServer).UpdateMargin(ctx, req.(*UpdateMarginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Settings_GetMarginArchive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettingsServer).GetMarginArchive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Settings_GetMarginArchive_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettingsServer).GetMarginArchive(ctx, req.(*AuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Settings_GetMarginArchiveBrand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarginBrandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettingsServer).GetMarginArchiveBrand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Settings_GetMarginArchiveBrand_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettingsServer).GetMarginArchiveBrand(ctx, req.(*MarginBrandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Settings_DeleteMargin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettingsServer).DeleteMargin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Settings_DeleteMargin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettingsServer).DeleteMargin(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Settings_GetShops_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettingsServer).GetShops(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Settings_GetShops_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettingsServer).GetShops(ctx, req.(*AuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Settings_GetCompanyShops_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettingsServer).GetCompanyShops(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Settings_GetCompanyShops_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettingsServer).GetCompanyShops(ctx, req.(*AuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Settings_SetCompanyShop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetCompanyShopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettingsServer).SetCompanyShop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Settings_SetCompanyShop_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettingsServer).SetCompanyShop(ctx, req.(*SetCompanyShopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Settings_ActivateCompanyShop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivateCompanyShopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettingsServer).ActivateCompanyShop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Settings_ActivateCompanyShop_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettingsServer).ActivateCompanyShop(ctx, req.(*ActivateCompanyShopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Settings_ServiceDesc is the grpc.ServiceDesc for Settings service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Settings_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "settings.Settings",
	HandlerType: (*SettingsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTaxes",
			Handler:    _Settings_GetTaxes_Handler,
		},
		{
			MethodName: "SetCompanyTax",
			Handler:    _Settings_SetCompanyTax_Handler,
		},
		{
			MethodName: "GetCompanyTaxes",
			Handler:    _Settings_GetCompanyTaxes_Handler,
		},
		{
			MethodName: "GetCompanyTax",
			Handler:    _Settings_GetCompanyTax_Handler,
		},
		{
			MethodName: "GetBrands",
			Handler:    _Settings_GetBrands_Handler,
		},
		{
			MethodName: "GetBrand",
			Handler:    _Settings_GetBrand_Handler,
		},
		{
			MethodName: "SearchBrand",
			Handler:    _Settings_SearchBrand_Handler,
		},
		{
			MethodName: "SetBrand",
			Handler:    _Settings_SetBrand_Handler,
		},
		{
			MethodName: "GetCompanyBrands",
			Handler:    _Settings_GetCompanyBrands_Handler,
		},
		{
			MethodName: "GetCompanyBrand",
			Handler:    _Settings_GetCompanyBrand_Handler,
		},
		{
			MethodName: "GetMargin",
			Handler:    _Settings_GetMargin_Handler,
		},
		{
			MethodName: "GetMarginBrand",
			Handler:    _Settings_GetMarginBrand_Handler,
		},
		{
			MethodName: "SetMargin",
			Handler:    _Settings_SetMargin_Handler,
		},
		{
			MethodName: "SetMarginBrand",
			Handler:    _Settings_SetMarginBrand_Handler,
		},
		{
			MethodName: "UpdateMargin",
			Handler:    _Settings_UpdateMargin_Handler,
		},
		{
			MethodName: "GetMarginArchive",
			Handler:    _Settings_GetMarginArchive_Handler,
		},
		{
			MethodName: "GetMarginArchiveBrand",
			Handler:    _Settings_GetMarginArchiveBrand_Handler,
		},
		{
			MethodName: "DeleteMargin",
			Handler:    _Settings_DeleteMargin_Handler,
		},
		{
			MethodName: "GetShops",
			Handler:    _Settings_GetShops_Handler,
		},
		{
			MethodName: "GetCompanyShops",
			Handler:    _Settings_GetCompanyShops_Handler,
		},
		{
			MethodName: "SetCompanyShop",
			Handler:    _Settings_SetCompanyShop_Handler,
		},
		{
			MethodName: "ActivateCompanyShop",
			Handler:    _Settings_ActivateCompanyShop_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "settings/v1/settings.proto",
}
