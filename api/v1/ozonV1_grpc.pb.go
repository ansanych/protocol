// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: v1/ozonV1.proto

package protocol

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Ozon_SetOzonAuth_FullMethodName   = "/protocolV1.Ozon/SetOzonAuth"
	Ozon_GetOzonAuth_FullMethodName   = "/protocolV1.Ozon/GetOzonAuth"
	Ozon_ErrorOzonAuth_FullMethodName = "/protocolV1.Ozon/ErrorOzonAuth"
	Ozon_GetWidgetData_FullMethodName = "/protocolV1.Ozon/GetWidgetData"
)

// OzonClient is the client API for Ozon service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OzonClient interface {
	SetOzonAuth(ctx context.Context, in *SetOzonAuthRequest, opts ...grpc.CallOption) (*BoolReply, error)
	GetOzonAuth(ctx context.Context, in *Access, opts ...grpc.CallOption) (*OzonAuth, error)
	ErrorOzonAuth(ctx context.Context, in *Access, opts ...grpc.CallOption) (*BoolReply, error)
	GetWidgetData(ctx context.Context, in *Access, opts ...grpc.CallOption) (*WidgetReply, error)
}

type ozonClient struct {
	cc grpc.ClientConnInterface
}

func NewOzonClient(cc grpc.ClientConnInterface) OzonClient {
	return &ozonClient{cc}
}

func (c *ozonClient) SetOzonAuth(ctx context.Context, in *SetOzonAuthRequest, opts ...grpc.CallOption) (*BoolReply, error) {
	out := new(BoolReply)
	err := c.cc.Invoke(ctx, Ozon_SetOzonAuth_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ozonClient) GetOzonAuth(ctx context.Context, in *Access, opts ...grpc.CallOption) (*OzonAuth, error) {
	out := new(OzonAuth)
	err := c.cc.Invoke(ctx, Ozon_GetOzonAuth_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ozonClient) ErrorOzonAuth(ctx context.Context, in *Access, opts ...grpc.CallOption) (*BoolReply, error) {
	out := new(BoolReply)
	err := c.cc.Invoke(ctx, Ozon_ErrorOzonAuth_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ozonClient) GetWidgetData(ctx context.Context, in *Access, opts ...grpc.CallOption) (*WidgetReply, error) {
	out := new(WidgetReply)
	err := c.cc.Invoke(ctx, Ozon_GetWidgetData_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OzonServer is the server API for Ozon service.
// All implementations must embed UnimplementedOzonServer
// for forward compatibility
type OzonServer interface {
	SetOzonAuth(context.Context, *SetOzonAuthRequest) (*BoolReply, error)
	GetOzonAuth(context.Context, *Access) (*OzonAuth, error)
	ErrorOzonAuth(context.Context, *Access) (*BoolReply, error)
	GetWidgetData(context.Context, *Access) (*WidgetReply, error)
	mustEmbedUnimplementedOzonServer()
}

// UnimplementedOzonServer must be embedded to have forward compatible implementations.
type UnimplementedOzonServer struct {
}

func (UnimplementedOzonServer) SetOzonAuth(context.Context, *SetOzonAuthRequest) (*BoolReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetOzonAuth not implemented")
}
func (UnimplementedOzonServer) GetOzonAuth(context.Context, *Access) (*OzonAuth, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOzonAuth not implemented")
}
func (UnimplementedOzonServer) ErrorOzonAuth(context.Context, *Access) (*BoolReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ErrorOzonAuth not implemented")
}
func (UnimplementedOzonServer) GetWidgetData(context.Context, *Access) (*WidgetReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWidgetData not implemented")
}
func (UnimplementedOzonServer) mustEmbedUnimplementedOzonServer() {}

// UnsafeOzonServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OzonServer will
// result in compilation errors.
type UnsafeOzonServer interface {
	mustEmbedUnimplementedOzonServer()
}

func RegisterOzonServer(s grpc.ServiceRegistrar, srv OzonServer) {
	s.RegisterService(&Ozon_ServiceDesc, srv)
}

func _Ozon_SetOzonAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetOzonAuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OzonServer).SetOzonAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ozon_SetOzonAuth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OzonServer).SetOzonAuth(ctx, req.(*SetOzonAuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ozon_GetOzonAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Access)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OzonServer).GetOzonAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ozon_GetOzonAuth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OzonServer).GetOzonAuth(ctx, req.(*Access))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ozon_ErrorOzonAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Access)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OzonServer).ErrorOzonAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ozon_ErrorOzonAuth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OzonServer).ErrorOzonAuth(ctx, req.(*Access))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ozon_GetWidgetData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Access)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OzonServer).GetWidgetData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ozon_GetWidgetData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OzonServer).GetWidgetData(ctx, req.(*Access))
	}
	return interceptor(ctx, in, info, handler)
}

// Ozon_ServiceDesc is the grpc.ServiceDesc for Ozon service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Ozon_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protocolV1.Ozon",
	HandlerType: (*OzonServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetOzonAuth",
			Handler:    _Ozon_SetOzonAuth_Handler,
		},
		{
			MethodName: "GetOzonAuth",
			Handler:    _Ozon_GetOzonAuth_Handler,
		},
		{
			MethodName: "ErrorOzonAuth",
			Handler:    _Ozon_ErrorOzonAuth_Handler,
		},
		{
			MethodName: "GetWidgetData",
			Handler:    _Ozon_GetWidgetData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/ozonV1.proto",
}
